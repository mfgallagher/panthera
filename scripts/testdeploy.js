var Tx = require('ethereumjs-tx').Transaction;
const Web3 = require('web3')
const web3 = new Web3('https://ropsten.infura.io/v3/310967b8570b43659180bfbc81452dbb')

const deployerAccount ='0x418bdD8ecFC2E2ADfaC56cb6E57e68032c4bd9e9'

//in reality you never want to set your private key publicly
//use an environment variable to set your key then call it here using a buffer
const privateKey = Buffer.from('15d7eb2b174ed286fedd14629b26d893597f3bdd0a69ac96db5670890c35dd6a','hex')

web3.eth.getTransactionCount(deployerAccount, (err, txCount) => {

//get smart contract data
const contractData = '0x60806040526040518060400160405280600c81526020017f4772616e6f6c615f7465737400000000000000000000000000000000000000008152506000908051906020019061004f92919061013c565b506040518060400160405280600381526020017f474e5200000000000000000000000000000000000000000000000000000000008152506001908051906020019061009b92919061013c565b50620186a06002553480156100af57600080fd5b50600254600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101e7565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261017257600085556101b9565b82601f1061018b57805160ff19168380011785556101b9565b828001600101855582156101b9579182015b828111156101b857825182559160200191906001019061019d565b5b5090506101c691906101ca565b5090565b5b808211156101e35760008160009055506001016101cb565b5090565b6108c5806101f66000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306fdde031461006757806318160ddd146100ea57806370a08231146101085780638da5cb5b1461016057806395d89b4114610194578063a9059cbb14610217575b600080fd5b61006f610265565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100af578082015181840152602081019050610094565b50505050905090810190601f1680156100dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100f2610303565b6040518082815260200191505060405180910390f35b61014a6004803603602081101561011e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610309565b6040518082815260200191505060405180910390f35b610168610352565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61019c610378565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101dc5780820151818401526020810190506101c1565b50505050905090810190601f1680156102095780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102636004803603604081101561022d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610416565b005b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102fb5780601f106102d0576101008083540402835291602001916102fb565b820191906000526020600020905b8154815290600101906020018083116102de57829003601f168201915b505050505081565b60025481565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561040e5780601f106103e35761010080835404028352916020019161040e565b820191906000526020600020905b8154815290600101906020018083116103f157829003601f168201915b505050505081565b6104946040518060400160405280601b81526020017f53656e6465722062616c616e636520697320257320746f6b656e730000000000815250600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461060a565b6104d46040518060400160405280601e81526020017f547279696e6720746f2073656e6420257320746f6b656e7320746f20257300008152508284610711565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561056c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180610861602f913960400191505060405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505050565b61070d82826040516024018080602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561065857808201518184015260208101905061063d565b50505050905090810190601f1680156106855780820380516001836020036101000a031916815260200191505b5093505050506040516020818303038152906040527f9710a9d0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610837565b5050565b61083283838360405160240180806020018481526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b8381101561077c578082015181840152602081019050610761565b50505050905090810190601f1680156107a95780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040527fe3849f79000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610837565b505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa505050505056fe596f7520646f206e6f74206861766520656e6f75676820746f6b656e7320666f722074686973207472616e73666572a26469706673582212209735a2dbe6c5198a1d6c572b1684c5e098dd85bcc7fa4a39c4a50dd5397f963464736f6c63430007060033'




//create transaction object
const txObject = {
    nonce: web3.utils.toHex(txCount),
    //notice the gas limit because it is specific to Ropsten -- each test network and mainnet have their own gas limits
    gasLimit: web3.utils.toHex(8000000) ,
    gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),
    data: contractData
}


//sign the transaction
const tx = new Tx(txObject,{'chain':'ropsten'})
tx.sign(privateKey)

const serializedTx = tx.serialize()
const raw = '0x' + serializedTx.toString('hex')




//broadcast the transaction
web3.eth.sendSignedTransaction(raw, (err, txHash) => {
    console.log('err:', err, 'txHash:', txHash)
//we can use the txHash to find the contract on etherscan
})

})
